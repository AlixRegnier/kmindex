include(FindPackageHandleStandardArgs)

find_path(XXHASH_INCLUDE_DIR NAMES xxhash.h)
find_library(XXHASH_LIBRARY NAMES xxhash)

if (XXHASH_LIBRARY)
  file(READ "${XXHASH_INCLUDE_DIR}/xxhash.h" XXHASH_FILE)

  string(REGEX MATCH "XXH_VERSION_MAJOR *([0-9]*)" _ ${XXHASH_FILE})
  set(XXHASH_VERSION_MAJOR ${CMAKE_MATCH_1})
  string(REGEX MATCH "XXH_VERSION_MINOR *([0-9]*)" _ ${XXHASH_FILE})
  set(XXHASH_VERSION_MINOR ${CMAKE_MATCH_1})
  string(REGEX MATCH "XXH_VERSION_RELEASE *([0-9]*)" _ ${XXHASH_FILE})
  set(XXHASH_VERSION_PATCH ${CMAKE_MATCH_1})

  set(XXHASH_VERSION "${XXHASH_VERSION_MAJOR}.${XXHASH_VERSION_MINOR}.${XXHASH_VERSION_PATCH}")

  find_package_check_version(${XXHASH_VERSION} XXHASH_VERSION_OK
    HANDLE_VERSION_RANGE RESULT_MESSAGE_VARIABLE XXHASH_FAILED)

  include(CheckCSourceRuns)
  set(CMAKE_REQUIRED_INCLUDES ${XXHASH_INCLUDE_DIR})
  set(CMAKE_REQUIRED_LIBRARIES ${XXHASH_LIBRARY})
  check_c_source_runs("
    #include <xxhash.h>
    int main()
    {
      return 0;
    }
    " XXHASH_COMPILE_OK)
  set(CMAKE_REQUIRED_INCLUDES)
  set(CMAKE_REQUIRED_LIBRARIES)
endif()

find_package_handle_standard_args(
  XXHASH
  REQUIRED_VARS XXHASH_LIBRARY XXHASH_INCLUDE_DIR XXHASH_VERSION_OK XXHASH_COMPILE_OK
  VERSION_VAR XXHASH_VERSION)

mark_as_advanced(
  XXHASH_INCLUDE_DIR
  XXHASH_LIBRARY
  XXHASH_VERSION
)

